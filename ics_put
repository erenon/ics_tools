#! /usr/bin/perl -w

# Simply uploads a ICS to a calendar

use strict;
use File::Temp qw/tempfile/;
use Getopt::Long;
use Pod::Usage;
use Data::UUID;
use YAML qw/LoadFile/;


######################################################
# Configuration

# Owncloud URL and user (password is in .netrc, used by
# cadaver)
my $cfg = LoadFile("$ENV{HOME}/.ics_toolsrc");
my $oc_server = $cfg->{oc_server};
my $oc_user = $cfg->{oc_user};

######################################################
# Command line parsing

=head1 NAME

ics_put -- Imports one or several ICS calendar into Owncloud

=head1 SYNOPSIS

ics_put [--verbose] [[--replace] --calendar=my_cal] <event.ics> [<event2.ics> ...]

=head1 DESCRIPTION

I<ics_put> splits an ICS file into atomic events, names the
files according to the UUID of the event, then uploads them
all to an Owncloud calendar.

=head1 OPTIONS

=over 4

=item I<--calendar>

Specifies the calendar in which to add the events. Defaults
to 'personal', which is the default calendar name in
Owncloud.

=item I<--replace>

Removes the contents of the calendar before importing the
events. For safety, you must specify I<--calendar> to use
this option.

=back

=cut

my ($verbose, $param_calendar, $param_replace, $help);
GetOptions(
    'verbose' => \$verbose,
    'calendar=s' => \$param_calendar,
    'replace' => \$param_replace,
    'help' => \$help,
) or die pod2usage();
die pod2usage(-verbose => 2) if defined $help;

die "Cowardly refusing to destroy unspecified calendar\n" if defined $param_replace and not defined $param_calendar;

$param_calendar //= "personal";


# Split a large VCALENDAR into unit VCALENDAR containing
# only one VEVENT (owncloud only accepts one event per file)
# Input: absolute path to basename for new files ,  input ICS
# Output: list of split files
sub ics_split {
    my ($in_file) = @_;

    my @out;
    my $cnt = 1;

    open my $in, $in_file or die "$in_file: $!\n";

    while (<$in>) {
        chomp;
        last if /^BEGIN:VEVENT/;
    }
    my $data = "BEGIN:VEVENT\n";
    while (<$in>) {
        chomp;
        if (/^END:VEVENT/) {
            chop $data;
            $data =~ /^UID:(.*)/m;
            my $uid = $1;

            # Add an UID if there isn't one
            my $ug = new Data::UUID;
            if (defined $uid) {
                chop $uid;
            } else {
                $uid = $ug->create_str();
                $data .= "\nUID: $uid\n";
            }

            # Outlook seems to sometimes produce several
            # events with the same UID (what's 'U' in UID
            # for again?), but I need my files
            # to really be unique...
            my $f_uid = $ug->create_str();

            my $filename = "/tmp/$f_uid.ics";
            open my $fh, "> $filename" or die "$filename: $!\n";
            $cnt++;

            print $fh <<EOF;
BEGIN:VCALENDAR
PRODID:ics_split
VERSION:2.0
$data
END:VEVENT
END:VCALENDAR
EOF

            push @out, $filename;
            $data = "";
        } else {
            $data .= "$_\n";
        }
    }
return @out;
}

######################################################
sub cadaver_cmd
{
    my ($cmd) = @_;

    my $out = `cadaver $oc_server/remote.php/caldav/calendars/$oc_user/$param_calendar <<EOC
    $cmd`;
    warn $out if $verbose or $out =~ /400/; # Owncloud fails with 400 bad request
}

######################################################
# Erase calendar if needed

if ($param_replace) {
    warn "Removing events in $param_calendar\n" if $verbose;

    cadaver_cmd(<<EOC
rm * 
quit
EOC
);
}

######################################################
# Submits a ICS file to owncloud

my $filename;

while ($filename = shift) {
    warn "Splitting $filename\n" if $verbose;

    my @files = ics_split $filename;

    for my $f (@files) {
        warn "Importing $f\n" if $verbose;
        cadaver_cmd(<<EOC
        put $f
        quit
EOC
    );
        unlink $f or die "$f: $!\n";
    }
}

